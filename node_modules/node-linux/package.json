{
  "name": "node-linux",
  "version": "0.1.2",
  "description": "Support daemon creation and management on Linux.",
  "keywords": [
    "ngn",
    "linux",
    "daemon",
    "service",
    "centos",
    "redhat",
    "debian",
    "ubuntu"
  ],
  "author": {
    "name": "Corey Butler",
    "email": "corey@coreybutler.com"
  },
  "devDependencies": {
    "mocha": "*"
  },
  "main": "lib/node-linux.js",
  "dependencies": {
    "optimist": "~0.6.0",
    "mu2": "~0.5.17"
  },
  "readmeFilename": "README.md",
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/coreybutler/node-linux.git"
  },
  "license": "MIT",
  "engine": "node >= 0.10.10",
  "readme": "[![NPM version](https://badge.fury.io/js/node-linux.png)](http://badge.fury.io/js/node-linux)\n[![NGN Dependencies](https://david-dm.org/coreybutler/node-linux.png)](https://david-dm.org/coreybutler/node-linux)\n[![Build](https://api.travis-ci.org/coreybutler/node-linux.png)](https://travis-ci.org/coreybutler/node-linux)\n\nFollow the author on [G+](https://plus.google.com/u/1/111169756342687497578?rel=author)\nor [Twitter (@goldglovecb)](http://twitter.com/goldglovecb).\n\n**Contributions Requested**\n\n(see below)\n\nDocumentation is available at the [node-linux portal](https://coreybutler.github.io/node-linux).\n\n# node-linux\n\nThis is a standalone module, originally designed for internal use in [NGN](http://github.com/thinkfirst/NGN).\nHowever; it is capable of providing the same features for Node.JS scripts\nindependently of NGN.\n\nFor alternative versions, see [node-windows](http://github.com/coreybutler/node-windows)\nand [node-linux](http://github.com/coreybutler/node-linux)\n\nThis module makes it possible to daemonize Node.js scripts natively (using systemv init.d scripts).\n\nTo start, install node-linux via:\n\n    npm install node-linux\n\nnode-linux has a utility to run Node.js scripts as Linux daemons.\n\nTo create a service with node-linux, prepare a script like:\n\n```js\n  var Service = require('node-linux').Service;\n\n  // Create a new service object\n  var svc = new Service({\n    name:'Hello World',\n    description: 'The nodejs.org example web server.',\n    script: '/path/to/helloworld.js'\n  });\n\n  // Listen for the \"install\" event, which indicates the\n  // process is available as a service.\n  svc.on('install',function(){\n    svc.start();\n  });\n\n  svc.install();\n```\n\nThe code above creates a new `Service` object, providing a pretty name and description.\nThe `script` attribute identifies the Node.js script that should run as a service. Upon running\nthis, the script will be available to the system. By default, node-linux produces systemv init\nscripts, meaning the services can be managed by typing `service myapp start` or `service myapp stop`\n(or `service myapp status` in some cases).\n\n![Windows Mac](https://raw.github.com/coreybutler/node-linux/master/docs/assets/images/startstopstatus.jpg)\n\nThe `Service` object emits the following events:\n\n- _install_ - Fired when the script is installed as a service.\n- _alreadyinstalled_ - Fired if the script is already known to be a service.\n- _invalidinstallation_ - Fired if an installation is detected but missing required files.\n- _uninstall_ - Fired when an uninstallation is complete.\n- _start_ - Fired when the new service is started.\n- _stop_ - Fired when the service is stopped.\n- _error_ - Fired in some instances when an error occurs.\n- _doesnotexist_ - Fired when an attempt to start a non-existent service is detected.\n\nIn the example above, the script listens for the `install` event. Since this event\nis fired when a service installation is complete, it is safe to start the service.\n\nServices created by node-linux are like other services running on Linux.\nThey can be started/stopped using `service myapp start` or `service myapp stop` and\nlogs are available (default is in /var/log).\n\n## Environment Variables\n\nSometimes you may want to provide a service with static data, passed in on creation of the service. You can do this by setting environment variables in the service config, as shown below:\n\n```js\n  var svc = new Service({\n    name:'Hello World',\n    description: 'The nodejs.org example web server.',\n    script: '/path/to/helloworld.js',\n    env: {\n      name: \"HOME\",\n      value: process.env[\"USERPROFILE\"] // service is now able to access the user who created its' home directory\n    }\n  });\n```\n\nYou can also supply an array to set multiple environment variables:\n\n```js\n  var svc = new Service({\n    name:'Hello World',\n    description: 'The nodejs.org example web server.',\n    script: '/path/to/helloworld.js',\n    env: [{\n      name: \"HOME\",\n      value: process.env[\"USERPROFILE\"] // service is now able to access the user who created its' home directory\n    },\n    {\n      name: \"TEMP\",\n      value: path.join(process.env[\"USERPROFILE\"],\"/temp\") // use a temp directory in user's home directory\n    }]\n  });\n```\n\n## Cleaning Up: Uninstall a Service\n\nUninstalling a previously created service is syntactically similar to installation.\n\n```js\n  var Service = require('node-linux').Service;\n\n  // Create a new service object\n  var svc = new Service({\n    name:'Hello World',\n    script: require('path').join(__dirname,'helloworld.js')\n  });\n\n  // Listen for the \"uninstall\" event so we know when it's done.\n  svc.on('uninstall',function(){\n    console.log('Uninstall complete.');\n    console.log('The service exists: ',svc.exists);\n  });\n\n  // Uninstall the service.\n  svc.uninstall();\n```\n\nThe uninstall process only removes process-specific files. **It does NOT delete your Node.js script, but it will remove the logs!**\n\n## What Makes node-linux Services Unique?\n\nLots of things!\n\n**Long Running Processes & Monitoring:**\n\nThere is no built-in service recovery in most Linux environments, and third party products can be fairly\nlimited or not easily configured from code. Therefore, node-linux creates a wrapper around the Node.js script.\nThis wrapper is responsible for restarting a failed service in an intelligent and configurable manner. For example,\nif your script crashes due to an unknown error, node-linux will attempt to restart it. By default,\nthis occurs every second. However; if the script has a fatal flaw that makes it crash repeatedly,\nit adds unnecessary overhead to the system. node-linux handles this by increasing the time interval\nbetween restarts and capping the maximum number of restarts.\n\n**Smarter Restarts That Won't Pummel Your Server:**\n\nUsing the default settings, node-linux adds 25% to the wait interval each time it needs to restart\nthe script. With the default setting (1 second), the first restart attempt occurs after one second.\nThe second occurs after 1.25 seconds. The third after 1.56 seconds (1.25 increased by 25%) and so on.\nBoth the initial wait time and the growth rate are configuration options that can be passed to a new\n`Service`. For example:\n\n```js\n  var svc = new Service({\n    name:'Hello World',\n    description: 'The nodejs.org example web server.',\n    script: '/path/to/helloworld.js'),\n    wait: 2,\n    grow: .5\n  });\n```\n\nIn this example, the wait period will start at 2 seconds and increase by 50%. So, the second attempt\nwould be 3 seconds later while the fourth would be 4.5 seconds later.\n\n**Don't DOS Yourself!**\n\nRepetitive recycling could potentially go on forever with a bad script. To handle these situations, node-linux\nsupports two kinds of caps. Using `maxRetries` will cap the maximum number of restart attempts. By\ndefault, this is unlimited. Setting it to 3 would tell the process to no longer restart a process\nafter it has failed 3 times. Another option is `maxRestarts`, which caps the number of restarts attempted\nwithin 60 seconds. For example, if this is set to 3 (the default) and the process crashes/restarts repeatedly,\nnode-linux will cease restart attempts after the 3rd cycle in a 60 second window. Both of these\nconfiguration options can be set, just like `wait` or `grow`.\n\nFinally, an attribute called `abortOnError` can be set to `true` if you want your script to **not** restart\nat all when it exits with an error.\n\n## How Services Are Made\n\nnode-linux uses the templates to generate init.d scripts for each Node.js script deployed as a\nservice. This file is created in `/etc/init.d` by default. Additionally, a log file is\ngenerated in `/var/log/<name>` for general output and error logging.\n\n_Event Logging_\n\nA log source named `myappname.log` provides basic logging for the service. It can be used to see\nwhen the entire service starts/stops.\n\nBy default, any `console.log`, `console.warn`, `console.error` or other output will be made available\nin one of these two files.\n\n# Contributions\n\nDue to some unforeseen life circumstances, I was not able to add all of the features I'd hoped to add\nbefore releasing this. I'll chip away at them over time, but I would be very interested in community contributions\nin the following areas:\n\n- systemd script generation\n- upstart script generation\n\nI have also added a tag in the issues called `feature request` to keep a running to-do list.\n\nIf you are interested in working on one of these features, please get in touch with me before you start to discuss\nthe feature.\n\n# License (MIT)\n\nCopyright (c) 2013 Corey Butler\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "bugs": {
    "url": "https://github.com/coreybutler/node-linux/issues"
  },
  "_id": "node-linux@0.1.2",
  "dist": {
    "shasum": "a9b8ceae8977a7639287fa441238b1ac8190a151",
    "tarball": "http://registry.npmjs.org/node-linux/-/node-linux-0.1.2.tgz"
  },
  "_from": "node-linux@*",
  "_npmVersion": "1.2.25",
  "_npmUser": {
    "name": "cbutler",
    "email": "corey@coreybutler.com"
  },
  "maintainers": [
    {
      "name": "cbutler",
      "email": "corey@coreybutler.com"
    }
  ],
  "directories": {},
  "_shasum": "a9b8ceae8977a7639287fa441238b1ac8190a151",
  "_resolved": "https://registry.npmjs.org/node-linux/-/node-linux-0.1.2.tgz"
}
